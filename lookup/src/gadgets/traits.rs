//! Trait for gadgets that enforce interaction constraints.

use p3_air::{AirBuilderWithPublicValues, PairBuilder, PermutationAirBuilder};
use p3_field::Field;

use crate::error::LookupError;
use crate::interaction::{Interaction, InteractionKind};

/// Trait for gadgets that enforce interaction constraints in STARKs.
pub trait InteractionGadget {
    /// Evaluates the interaction constraints for a given set of interactions.
    ///
    /// # Parameters
    ///
    /// - `builder`: The AIR builder for constraint generation
    /// - `interactions`: The interactions to constrain
    /// - `aux_column_index`: Index of the auxiliary column storing the intermediate state
    /// - `is_global`: Whether this is a global interaction (across multiple AIRs)
    /// - `expected_cumulative`: For global interactions, the expected final accumulated value
    fn eval_constraints<AB, K>(
        &self,
        builder: &mut AB,
        interactions: &[Interaction<AB::F, K>],
        aux_column_index: usize,
        is_global: bool,
        expected_cumulative: Option<AB::ExprEF>,
    ) where
        AB: PermutationAirBuilder + PairBuilder + AirBuilderWithPublicValues,
        K: InteractionKind;

    /// Returns the constraint degree for the given interactions.
    ///
    /// This is the maximum degree of any constraint polynomial generated by the gadget.
    fn constraint_degree<F: Field, K: InteractionKind>(
        &self,
        interactions: &[Interaction<F, K>],
    ) -> usize;

    /// Verifies that global accumulated values across all AIRs satisfy the protocol.
    ///
    /// For global interactions, each AIR computes an accumulated value. This function
    /// verifies that these values satisfy the protocol's constraints, ensuring that
    /// sends and receives balance globally.
    fn verify_global_final_value<F: Field>(
        &self,
        all_expected_cumulative: &[F],
    ) -> Result<(), LookupError>;
}

#!/bin/bash

# Most of the logic in this script is generated by models. Generally I don't rely so heavily on this, but we're sort of needing to do all this as a hack to make `release-plz` work, which eventually may get the option to ignore `dev-dependencies`.

# Check if cargo-semver-checks is installed
check_binary_installed() {
  local binary_name="$1"
  if ! type "$binary_name" >/dev/null 2>&1; then
    echo "$binary_name is not installed."
    exit 1
  fi
}

if [ -z "${GIT_TOKEN}" ]; then
  echo "\"GIT_TOKEN\" is not set. release-plz will not work without it."
  exit 1
fi

current_branch=$(git rev-parse --abbrev-ref HEAD)

if [ "$current_branch" != "main" ] ; then
  echo "Must be on the main branch to do a release."
  exit 1
fi

check_binary_installed "cargo-semver-checks"
check_binary_installed "release-plz"

# Remove any line that defines nightly-features in a TOML file
# ... Wdym, it's so readable? :P
find . -name "Cargo.toml" -exec sed -i.backup '
  # Delete single-line nightly-features
  /^nightly-features *= *\[.*\]$/d
  
  # Delete multi-line nightly-features
  /^nightly-features *= *\[/ {
    :loop
    N
    /\]$/!bloop
    d
  }
' {} \;

# Temporarily remove dev-dependencies from all Cargo.toml.
# We need to do this because there is not way to get release-plz to ignore dev-dependencies, and there are multiple local cyclic dependencies if we include them.
find . -name "Cargo.toml" -exec sed -i \
  '/^\nightly-features/,/^\[.*\]/{
    /^\[dev-dependencies\]/d
    /^\[.*\]/!d
  }' {} \;

release-plz update &&
release-plz release

# # Restore original dependencies
find . -name "Cargo.toml.backup" -exec bash -c 'mv "$1" "${1%.backup}"' _ {} \;
